#!/bin/sh

# ----- WireGuard setup section -----
if [ -f "/etc/wireguard/wg0.conf" ]; then
    echo "WireGuard config found, connecting..."
    
    # Create interface if needed
    ip link add dev wg0 type wireguard 2>/dev/null || true
    
    # Extract configs with simpler parsing
    parse_config() {
        grep "^$1" /etc/wireguard/wg0.conf | head -n 1 | cut -d '=' -f 2- | sed 's/^[ \t]*//;s/[ \t]*$//'
    }
    
    ADDRESS=$(parse_config "Address" | cut -d ',' -f 1)
    PRIVATE_KEY=$(parse_config "PrivateKey")
    PUBLIC_KEY=$(parse_config "PublicKey")
    PRESHARED_KEY=$(parse_config "PresharedKey" || echo "")
    ALLOWED_IPS=$(parse_config "AllowedIPs")
    ENDPOINT=$(parse_config "Endpoint")
    PERSISTENT_KEEPALIVE=$(parse_config "PersistentKeepalive" || echo "25")
    DNS_SERVERS=$(parse_config "DNS")
    
    # Set address if needed
    ip address add "$ADDRESS" dev wg0 2>/dev/null || true
    
    # Configure WireGuard with one-time files
    echo "$PRIVATE_KEY" > /tmp/private.key
    chmod 600 /tmp/private.key
    
    # Set up WireGuard with peer
    wg set wg0 private-key /tmp/private.key
    
    if [ -n "$PRESHARED_KEY" ]; then
        echo "$PRESHARED_KEY" > /tmp/preshared.key
        chmod 600 /tmp/preshared.key
        wg set wg0 peer "$PUBLIC_KEY" preshared-key /tmp/preshared.key endpoint "$ENDPOINT" \
            allowed-ips "$ALLOWED_IPS" persistent-keepalive "$PERSISTENT_KEEPALIVE"
        rm -f /tmp/preshared.key
    else
        wg set wg0 peer "$PUBLIC_KEY" endpoint "$ENDPOINT" \
            allowed-ips "$ALLOWED_IPS" persistent-keepalive "$PERSISTENT_KEEPALIVE"
    fi
    
    rm -f /tmp/private.key
    
    # Bring up interface
    ip link set up dev wg0
    
    # Set up routing
    DEFAULT_IFACE=$(ip -o -4 route show to default | awk '{print $5}' | head -n 1)
    DEFAULT_GW=$(ip -o -4 route show to default | awk '{print $3}' | head -n 1)
    WG_SERVER_IP=$(echo $ENDPOINT | cut -d ':' -f 1)
    
    # Add routing table if needed
    mkdir -p /etc/iproute2
    touch /etc/iproute2/rt_tables
    grep -q "200 wg" /etc/iproute2/rt_tables || echo "200 wg" >> /etc/iproute2/rt_tables
    
    # Set up routing
    ip route add $WG_SERVER_IP via $DEFAULT_GW dev $DEFAULT_IFACE 2>/dev/null || true
    ip rule add from $ADDRESS table 200 2>/dev/null || true
    ip route add default dev wg0 table 200 2>/dev/null || true
    ip rule add to $WG_SERVER_IP table main 2>/dev/null || true
    ip route del default 2>/dev/null || true
    ip route add default dev wg0 2>/dev/null || true
    
    # Set up firewall rules
    iptables -F
    iptables -t nat -F
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A INPUT -p tcp --dport 9150 -j ACCEPT
    iptables -A INPUT -p udp --dport 8853 -j ACCEPT
    iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE
    
    # Enable IP forwarding
    sysctl -w net.ipv4.ip_forward=1 >/dev/null 2>&1 || true
    
    # Configure DNS
    echo "# Generated by WireGuard" > /etc/resolv.conf
    if [ -n "$DNS_SERVERS" ]; then
        for DNS in $(echo $DNS_SERVERS | tr ',' ' '); do
            echo "nameserver $DNS" >> /etc/resolv.conf
        done
    else
        echo "nameserver 8.8.8.8" >> /etc/resolv.conf
        echo "nameserver 8.8.4.4" >> /etc/resolv.conf
    fi
    
    # Test connection
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        echo "WireGuard connection works"
    else
        echo "Warning: Could not ping 8.8.8.8 through WireGuard"
    fi
else
    echo "WireGuard config not found, continuing without WireGuard"
fi

# ----- Tor setup section -----
echo "Starting Tor..."

# Prepare directories
mkdir -p /etc/tor/bridges
chown -R tor:tor /etc/tor/bridges /var/lib/tor
chmod 700 /var/lib/tor

# Start Tor
echo "Container started and running."
exec su -s /bin/sh tor -c "exec /usr/bin/tor -f /etc/tor/torrc"